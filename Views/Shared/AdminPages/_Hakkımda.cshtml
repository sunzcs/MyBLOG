@model myblog.Models.Me
<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hakkımda</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <style>
    /* CSS Stilleri */
    .modern-tablo {
        width: 100%;
        border-collapse: collapse;
        font-family: Arial, sans-serif;
        margin: 20px 0;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        table-layout: fixed; /* Tablo genişliğini sabitler */
    }
    
    .modern-tablo th {
        background-color: #10087f;
        color: white;
        padding: 12px;
        text-align: left;
        border-bottom: 2px solid #ddd;
    }
    
    .modern-tablo td {
        padding: 10px;
        border-bottom: 1px solid #ddd;
        position: relative; /* Buton pozisyonu için gerekli */
        word-wrap: break-word; /* Uzun kelimeleri böler */
        overflow-wrap: break-word; /* Uzun kelimeleri böler */
        white-space: normal; /* Normal boşluk davranışı */
    }
    
    /* İlk sütun için genişlik ayarı */
    .modern-tablo td:first-child {
        width: 70%; /* İçerik için daha geniş alan */
    }
    
    /* İkinci sütun için genişlik ayarı */
    .modern-tablo td:nth-child(2) {
        width: 30%; /* Buton için daha dar alan */
    }
    
    .modern-tablo tr:nth-child(even) {
        background-color: #f2f2f2;
    }
    
    .modern-tablo tr:hover {
        background-color: #e6f7e6;
    }
    
    /* Buton stilleri ve sağa sabitleme */
    .btn-primary {
        background-color: #10087f;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        text-decoration: none;
        position: absolute; /* Mutlak pozisyon */
        right: 10px; /* Sağdan 10px boşluk */
        top: 50%; /* Dikeyde ortala */
        transform: translateY(-50%); /* Tam ortalamak için */
    }
    
    .btn-primary:hover {
        background-color: #0d6bcd;
    }
    .modal-backdrop {
            display: none !important;
        }
        
        /* Modal arka planını şeffaf yap */
        .modal {
            background-color: transparent;
        }
    </style>
</head>
<body>

<table class="modern-tablo">
    <tr>
        <th>Hakkımda</th>
    </tr>
    <tbody>
    @*foreach (var viewModel in Model.Me)
    {
        <tr data-id="@viewModel.Id" data-type="me" data-property="Name">
            <td>@viewModel.Name</td>
            <td><button type="button" class="btn btn-primary edit-btn">Düzenle</button></td>
        </tr>
    }
    @foreach (var viewModel in Model.Education)
    {
        <tr data-id="@viewModel.EducationId" data-type="education" data-property="SCStatement">
            <td>@viewModel.SCStatement</td>
            <td><button type="button" class="btn btn-primary edit-btn">Düzenle</button></td>
        </tr>
        <tr data-id="@viewModel.EducationId" data-type="education" data-property="SCName">
            <td>@viewModel.SCName</td>
            <td><button type="button" class="btn btn-primary edit-btn">Düzenle</button></td>
        </tr>
        <tr data-id="@viewModel.EducationId" data-type="education" data-property="SCStartdate">
            <td>@viewModel.SCStartdate.ToString("yyyy-MM-dd")</td>
            <td><button type="button" class="btn btn-primary edit-btn">Düzenle</button></td>
        </tr>
        <tr data-id="@viewModel.EducationId" data-type="education" data-property="SCFinishdate">
            <td>@viewModel.SCFinishdate.ToString("yyyy-MM-dd")</td>
            <td><button type="button" class="btn btn-primary edit-btn">Düzenle</button></td>
        </tr>
    }
    @foreach (var viewModel in Model.Me)
    {
        <tr data-id="@viewModel.Id" data-type="me" data-property="Email">
            <td>@viewModel.Email</td>
            <td><button type="button" class="btn btn-primary edit-btn">Düzenle</button></td>
        </tr>
        <tr data-id="@viewModel.Id" data-type="me" data-property="Phonenum">
            <td>@viewModel.Phonenum</td>
            <td><button type="button" class="btn btn-primary edit-btn">Düzenle</button></td>
        </tr>
        <tr data-id="@viewModel.Id" data-type="me" data-property="Address">
            <td>@viewModel.Address</td>
            <td><button type="button" class="btn btn-primary edit-btn">Düzenle</button></td>
        </tr>
    }
    @foreach (var viewModel in Model.Text)
    {
        <tr data-id="@viewModel.TextId" data-type="text" data-property="Text2">
            <td>@viewModel.Text2</td>
            <td><button type="button" class="btn btn-primary edit-btn">Düzenle</button></td>
        </tr>
    }*@
</tbody>

</table>

<div class="modal fade" id="editModal" tabindex="-1" data-bs-backdrop="false">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Metni Düzenle</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Kapat"></button>
      </div>
      <div class="modal-body">
        <textarea id="modalTextarea" class="form-control" rows="5"></textarea>
      </div>
      <div class="modal-footer" style="position: relative; height: 50px;">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"
          style="position: absolute; right: 120px; top: 50%; transform: translateY(-50%);">İptal</button>
        <button type="button" class="btn btn-primary" id="saveChanges"
          style="position: absolute; right: 30px; top: 50%; transform: translateY(-50%);">Kaydet</button>
      </div>
    </div>
  </div>
</div>

<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const editButtons = document.querySelectorAll('.edit-btn');
    const editModal = new bootstrap.Modal(document.getElementById('editModal'));
    const modalTextarea = document.getElementById('modalTextarea');
    const saveChangesBtn = document.getElementById('saveChanges');

    let currentItemId = null;
    let currentItemType = null;
    let currentRowElement = null;
    let currentProperty = null;

    editButtons.forEach(button => {
        button.addEventListener('click', function () {
            currentRowElement = this.closest('tr');
            currentItemId = Number(currentRowElement.dataset.id); // Sayıya çevirdik
            currentItemType = currentRowElement.dataset.type;
            currentProperty = currentRowElement.dataset.property;

            const currentText = currentRowElement.querySelector('td:first-child').innerText;
            modalTextarea.value = currentText;
            editModal.show();
        });
    });

    saveChangesBtn.addEventListener('click', function () {
        const newText = modalTextarea.value.trim();

        if (!newText) {
            alert("Boş değer kaydedilemez!");
            return;
        }

        fetch(`/${capitalizeFirstLetter(currentItemType)}/Update${capitalizeFirstLetter(currentItemType)}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                id: currentItemId,
                propertyName: currentProperty,
                newValue: newText
            })
        })
        .then(response => {
            if (!response.ok) throw new Error('Ağ yanıtı başarısız.');
            return response.json();
        })
        .then(data => {
            if (data.success) {
                if (currentRowElement) {
                    currentRowElement.querySelector('td:first-child').innerText = newText;
                }
                editModal.hide();
                alert('Veri başarıyla güncellendi!');
            } else {
                alert('Veri güncellenirken hata oluştu: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Fetch hatası:', error);
            alert('Veri güncellenirken hata oluştu. Konsolu kontrol edin.');
        });
    });

    document.getElementById('editModal').addEventListener('hidden.bs.modal', function () {
        currentItemId = null;
        currentItemType = null;
        currentRowElement = null;
        currentProperty = null;
        modalTextarea.value = '';
    });

    function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }
});
</script>

</body>
</html>