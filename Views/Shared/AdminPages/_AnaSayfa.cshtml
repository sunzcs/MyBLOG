@using myblog.Models
@model myblog.Models.ViewModel.ViewModel

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Ana Sayfa</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"/>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

    <style>
        /* CSS kodlarınız burada */
        .modern-tablo {
            width: 100%;
            border-collapse: collapse;
            font-family: Arial, sans-serif;
            margin: 20px 0;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            table-layout: fixed;
        }

        .modern-tablo th {
            background-color: #10087f;
            color: white;
            padding: 12px;
            text-align: left;
            border-bottom: 2px solid #ddd;
        }

        .modern-tablo td {
            padding: 10px;
            border-bottom: 1px solid #ddd;
            position: relative;
            word-wrap: break-word;
            overflow-wrap: break-word;
            white-space: normal;
        }

        .modern-tablo td:first-child {
            width: 70%;
        }

        .modern-tablo td:nth-child(2) {
            width: 30%;
        }

        .modern-tablo tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        .modern-tablo tr:hover {
            background-color: #e6f7e6;
        }

        .btn-primary {
            background-color: #10087f;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
        }

        .btn-primary:hover {
            background-color: #0d6bcd;
        }
    </style>
</head>

<body>
<table class="modern-tablo">
    <thead>
        <tr>
            <th>Ana Sayfa</th>
            <th>İşlem</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var meItem in Model.Me)
        {
            <tr data-id="@meItem.Id" data-type="me">
                <td>@meItem.Name</td>
                <td><button type="button" class="btn btn-primary edit-btn">Düzenle</button></td>
            </tr>
        }
        @foreach (var textItem in Model.Text)
        {
            <tr data-id="@textItem.TextId" data-type="text">
                <td>@textItem.Text1</td>
                <td><button type="button" class="btn btn-primary edit-btn">Düzenle</button></td>
            </tr>
        }
    </tbody>
</table>


<div class="modal fade" id="editModal" tabindex="-1" data-bs-backdrop="static" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered"> 
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Metni Düzenle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Kapat"></button>
            </div>
            <div class="modal-body">
                <textarea id="modalTextarea" class="form-control" rows="5"></textarea>
            </div>
            <div class="modal-footer" style="position: relative; height: 50px;">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" style="position: absolute; right: 120px; top: 50%; transform: translateY(-50%);">İptal</button> 
                <button type="button" class="btn btn-primary" id="saveChanges" style="position: absolute; right: 30px; top: 50%; transform: translateY(-50%);">Kaydet</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const editButtons = document.querySelectorAll('.edit-btn');
        const editModal = new bootstrap.Modal(document.getElementById('editModal'));
        const modalTextarea = document.getElementById('modalTextarea');
        const saveChangesBtn = document.getElementById('saveChanges');

        let currentItemId = null;
        let currentItemType = null;
        let currentRowElement = null; // Düzenlenen satırı tutmak için

        editButtons.forEach(button => {
            button.addEventListener('click', function () {
                currentRowElement = this.closest('tr'); // Butonun bağlı olduğu satırı al
                currentItemId = currentRowElement.dataset.id;
                currentItemType = currentRowElement.dataset.type;
                const currentText = currentRowElement.querySelector('td:first-child').innerText;
                
                modalTextarea.value = currentText;
                editModal.show();
            });
        });

        saveChangesBtn.addEventListener('click', function () {
            const newText = modalTextarea.value;

            let updateUrl = '';
            let payload = {};

            // currentItemType'a göre doğru URL ve payload'u ayarla
            if (currentItemType === 'me') {
                updateUrl = '/Me/UpdateMe'; // Me Controller'daki UpdateMe metodunu hedefle
                payload = { id: currentItemId, newValue: newText };
            } else if (currentItemType === 'text') {
                updateUrl = '/Text/UpdateText'; // Text Controller'daki UpdateText metodunu hedefle
                payload = { id: currentItemId, newValue: newText };
            } else {
                alert('Bilinmeyen veri tipi!');
                return; // Geçersiz tip ise işlemi durdur
            }

            fetch(updateUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    // Eğer AntiForgery Token kullanıyorsanız bu satırı aktif edin ve sayfanıza ekleyin:
                    // <input type="hidden" name="__RequestVerificationToken" value="@Html.AntiForgeryToken().ToString()" />
                    // 'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value 
                },
                body: JSON.stringify(payload)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json(); // Sunucudan gelen JSON yanıtını bekle
            })
            .then(data => {
                if (data.success) {
                    // Sayfadaki metni güncelle
                    if (currentRowElement) {
                        currentRowElement.querySelector('td:first-child').innerText = newText;
                    }
                    editModal.hide(); // Modalı kapat
                    alert('Veri başarıyla güncellendi!');
                } else {
                    alert('Veri güncellenirken bir hata oluştu: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Fetch error:', error);
                alert('Veri güncellenirken bir hata oluştu. Detaylar için konsola bakın.');
            });
        });

        // Modalı kapatırken verileri sıfırla
        document.getElementById('editModal').addEventListener('hidden.bs.modal', function () {
            currentItemId = null;
            currentItemType = null;
            currentRowElement = null;
            modalTextarea.value = '';
        });
    });
</script>

</body>
</html>